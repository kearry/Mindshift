// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int       @id @default(autoincrement())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  displayName     String?
  bio             String?
  profileImageUrl String?
  totalPoints     Int       @default(0)
  rank            Int?
  createdAt       DateTime  @default(now())
  lastLogin       DateTime?
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  isAdmin         Boolean   @default(false)

  // Relations
  authProviders AuthProvider[]
  debates       Debate[]
  arguments     Argument[]
  comments      Comment[]
  achievements  UserAchievement[]
  notifications Notification[]
  sessions      Session[]

  // --- Added Following/Followers Relations ---
  following     UserFollows[] @relation("UserFollowing") // Users this user is following
  followers     UserFollows[] @relation("UserFollowers") // Users following this user
  // -----------------------------------------

  @@map("users")
}

// --- New UserFollows Model ---
model UserFollows {
  followId    Int      @id @default(autoincrement())
  followerId  Int      // ID of the user doing the following
  followedId  Int      // ID of the user being followed
  createdAt   DateTime @default(now())

  // Relations to User model
  follower    User     @relation("UserFollowing", fields: [followerId], references: [userId], onDelete: Cascade)
  followed    User     @relation("UserFollowers", fields: [followedId], references: [userId], onDelete: Cascade)

  @@unique([followerId, followedId]) // Ensure a user can only follow another user once
  @@map("user_follows")
}
// ---------------------------

model AuthProvider {
  providerId     Int      @id @default(autoincrement())
  userId         Int
  providerName   String
  providerUserId String
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@unique([providerName, providerUserId])
  @@map("auth_providers")
}

model Topic {
  topicId         Int      @id @default(autoincrement())
  name            String
  description     String?
  category        String?
  isSponsored     Boolean  @default(false)
  sponsorId       Int?
  currentStance   Float
  stanceReasoning String?
  debateCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActive        Boolean  @default(true)
  debates         Debate[]
  @@map("topics")
}

model Debate {
  debateId      Int      @id @default(autoincrement())
  topicId       Int
  userId        Int
  initialStance Float
  finalStance   Float?
  goalDirection String
  pointsEarned  Float?
  turnCount     Int      @default(0)
  maxTurns      Int      @default(7)
  status        String   @default("active")
  summaryArticle String?   @map("summary_article")
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  isPublic      Boolean  @default(true)
  topic         Topic    @relation(fields: [topicId], references: [topicId])
  user          User     @relation(fields: [userId], references: [userId])
  arguments     Argument[]
  comments      Comment[]
  @@map("debates")
}

model Argument {
  argumentId    Int      @id @default(autoincrement())
  debateId      Int
  userId        Int
  turnNumber    Int
  argumentText  String   @map("argument_text")
  aiResponse    String?
  stanceBefore  Float
  stanceAfter   Float?
  stanceShift   Float?
  shiftReasoning String?  @map("shift_reasoning")
  createdAt     DateTime @default(now())
  debate        Debate   @relation(fields: [debateId], references: [debateId], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [userId])
  @@map("arguments")
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  debateId    Int?
  userId      Int
  parentId    Int?     @map("parent_comment_id")
  commentText String   @map("comment_text")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  debate      Debate?  @relation(fields: [debateId], references: [debateId], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [userId])
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade, onUpdate: NoAction)
  replies     Comment[] @relation("CommentReplies")
  @@map("comments")
}

model UserAchievement {
  userAchievementId Int      @id @default(autoincrement())
  userId            Int
  achievementId     Int
  achievedAt        DateTime @default(now())
  user              User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // achievement Achievement @relation(...) // Add Achievement model later
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Notification {
  notificationId   Int      @id @default(autoincrement())
  userId           Int
  notificationType String
  content          String? @map("content")
  relatedUserId    Int?
  relatedDebateId  Int?
  relatedCommentId Int?
  isRead           Boolean  @default(false)
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Add relations for relatedUser, relatedDebate, relatedComment later
  @@map("notifications")
}

model Session {
  sessionId String   @id @map("session_id")
  userId    Int
  ipAddress String?
  userAgent String? @map("user_agent")
  createdAt DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@map("sessions")
}