// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Or your chosen database provider (postgresql, mysql, etc.)
  url      = env("DATABASE_URL")
}

// --- Models ---

model User {
  userId          Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  username        String   @unique
  email           String   @unique
  passwordHash    String
  displayName     String?
  bio             String?
  profileImageUrl String?
  totalPoints     Int      @default(0)
  rank            String?
  isAdmin         Boolean  @default(false)
  isActive        Boolean  @default(true)

  debates         Debate[]
  arguments       Argument[]
  comments        Comment[]
  notifications   Notification[] @relation("UserNotification") // Relation for notifications FOR this user

  // Follows relationships
  followers       UserFollows[] @relation("Followed")
  following       UserFollows[] @relation("Follower")

  // *** ADDED: Opposite relation for notifications related TO this user ***
  relatedNotifications Notification[] @relation("RelatedUserNotifications")

  // Session/Account models for NextAuth if needed
  // accounts        Account[]
  // sessions        Session[]

  @@map("users")
}

model UserFollows {
  followId    Int      @id @default(autoincrement())
  followerId  Int
  followedId  Int
  createdAt   DateTime @default(now())

  follower    User     @relation("Follower", fields: [followerId], references: [userId], onDelete: Cascade)
  followed    User     @relation("Followed", fields: [followedId], references: [userId], onDelete: Cascade)

  @@unique([followerId, followedId])
  @@map("user_follows")
}


model Topic {
  topicId         Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String   @unique
  description     String?
  category        String?
  currentStance   Float
  stanceReasoning String?
  isActive        Boolean  @default(true)

  scaleDefinitions Json?    // Store the AI's 0-10 scale definition

  debates         Debate[]

  @@map("topics")
}

model Debate {
  debateId        Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  topicId         Int
  initialStance   Float
  finalStance     Float?
  goalDirection   String
  status          String   @default("active")
  turnCount       Int      @default(0)
  maxTurns        Int      @default(5)
  pointsEarned    Float?
  summaryArticle  String?
  completedAt     DateTime?
  llmProvider     String?
  llmModel        String?

  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  topic           Topic    @relation(fields: [topicId], references: [topicId], onDelete: Cascade)

  arguments       Argument[]
  comments        Comment[]
  notifications   Notification[] @relation("RelatedDebate")

  @@index([userId])
  @@index([topicId])
  @@map("debates")
}


model Argument {
  argumentId      Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  debateId        Int
  userId          Int
  turnNumber      Int
  argumentText    String
  aiResponse      String?
  stanceBefore    Float
  stanceAfter     Float?
  stanceShift     Float?
  shiftReasoning  String?

  debate          Debate    @relation(fields: [debateId], references: [debateId], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([debateId])
  @@map("arguments")
}


model Comment {
  commentId       Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  commentText     String
  userId          Int
  debateId        Int
  parentId        Int?
  isDeleted       Boolean   @default(false)

  user            User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  debate          Debate    @relation(fields: [debateId], references: [debateId], onDelete: Cascade)

  parent          Comment?  @relation("Replies", fields: [parentId], references: [commentId], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("Replies")

  notifications   Notification[] @relation("RelatedComment")

  @@index([userId])
  @@index([debateId])
  @@index([parentId])
  @@map("comments")
}

model Notification {
  notificationId    Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  userId            Int       // User receiving the notification
  notificationType  String
  relatedUserId     Int?      // e.g., ID of the user who followed or commented
  relatedDebateId   Int?
  relatedCommentId  Int?
  content           String
  isRead            Boolean   @default(false)

  // Corrected relation names
  user              User      @relation("UserNotification", fields: [userId], references: [userId], onDelete: Cascade) // Relation for the recipient
  relatedUser       User?     @relation("RelatedUserNotifications", fields: [relatedUserId], references: [userId], onDelete: SetNull) // Relation for the user *causing* the notification
  relatedDebate     Debate?   @relation("RelatedDebate", fields: [relatedDebateId], references: [debateId], onDelete: Cascade)
  relatedComment    Comment?  @relation("RelatedComment", fields: [relatedCommentId], references: [commentId], onDelete: Cascade)

  @@index([userId])
  @@index([relatedUserId])
  @@index([relatedDebateId])
  @@map("notifications")
}

// Example NextAuth Models (Uncomment and adjust if using PrismaAdapter)
/*
model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
*/