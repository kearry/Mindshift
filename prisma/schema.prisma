// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Change provider to sqlite
  url      = env("DATABASE_URL") // Use environment variable
}

// --- Models based on database-schema.txt [cite: MindShift/database-schema.txt] ---

model User {
  userId          Int       @id @default(autoincrement())
  username        String    @unique
  email           String    @unique
  passwordHash    String
  displayName     String?
  bio             String?
  profileImageUrl String?
  totalPoints     Int       @default(0)
  rank            Int?
  createdAt       DateTime  @default(now())
  lastLogin       DateTime?
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  isAdmin         Boolean   @default(false)

  // Relations
  authProviders AuthProvider[]
  debates       Debate[]
  arguments     Argument[]
  comments      Comment[]
  achievements  UserAchievement[]
  notifications Notification[]
  sessions      Session[]
  // Add relations for sponsored topics, follows etc. later

  @@map("users")
}

model AuthProvider {
  providerId     Int      @id @default(autoincrement())
  userId         Int
  providerName   String   // 'google', 'github', etc.
  providerUserId String
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([providerName, providerUserId])
  @@map("auth_providers")
}

model Topic {
  topicId         Int      @id @default(autoincrement())
  name            String
  description     String?
  category        String?  // Consider relating this to a Category model later
  isSponsored     Boolean  @default(false)
  sponsorId       Int?     // Consider relating this to User later
  currentStance   Float    // Prisma uses Float for DECIMAL
  stanceReasoning String?
  debateCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActive        Boolean  @default(true)

  // Relations
  debates Debate[]
  // Add relation for topic category mappings later

  @@map("topics")
}

// Updated Debate model
model Debate {
  debateId      Int      @id @default(autoincrement())
  topicId       Int
  userId        Int
  initialStance Float    // Stance of the topic when debate started
  finalStance   Float?   // Stance when debate ends
  goalDirection String   // 'left' or 'right'
  pointsEarned  Float?
  turnCount     Int      @default(0)
  maxTurns      Int      @default(7) // Default from schema.txt [cite: MindShift/database-schema.txt]
  status        String   @default("active") // e.g., 'active', 'completed', 'abandoned'
  summaryArticle String?   @map("summary_article") // Explicit map for TEXT -> String
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  isPublic      Boolean  @default(true)

  topic     Topic      @relation(fields: [topicId], references: [topicId])
  user      User       @relation(fields: [userId], references: [userId])
  arguments Argument[]
  comments  Comment[]

  @@map("debates")
}

model Argument {
  argumentId    Int      @id @default(autoincrement())
  debateId      Int
  userId        Int      // User who made the argument
  turnNumber    Int
  argumentText  String   @map("argument_text") // Explicit map for TEXT -> String
  aiResponse    String?  // AI's response to this argument
  stanceBefore  Float    // Stance before this argument
  stanceAfter   Float?   // Stance after this argument
  stanceShift   Float?   // Calculated shift
  shiftReasoning String?  @map("shift_reasoning") // Explicit map for TEXT -> String
  createdAt     DateTime @default(now())

  debate Debate @relation(fields: [debateId], references: [debateId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId]) // Assuming user relation needed

  @@map("arguments")
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  debateId    Int?     // Can be null if it's a reply to another comment? Schema implies CASCADE on debate though.
  userId      Int
  parentId    Int?     @map("parent_comment_id")
  commentText String   @map("comment_text") // Explicit map for TEXT -> String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  debate  Debate?  @relation(fields: [debateId], references: [debateId], onDelete: Cascade) // Cascade if debate deleted
  user    User     @relation(fields: [userId], references: [userId]) // Set null if user deleted? Check requirements.
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade, onUpdate: NoAction) // Cascade delete replies
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Minimal UserAchievement model for relation - add Achievement model later
model UserAchievement {
  userAchievementId Int      @id @default(autoincrement())
  userId            Int
  achievementId     Int      // Relate to Achievement model later
  achievedAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // achievement Achievement @relation(...)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Minimal Notification model for relation
model Notification {
  notificationId   Int      @id @default(autoincrement())
  userId           Int
  notificationType String
  content          String? @map("content") // Explicit map for TEXT -> String
  relatedUserId    Int?
  relatedDebateId  Int?
  relatedCommentId Int?
  isRead           Boolean  @default(false)
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Add relations for relatedUser, relatedDebate, relatedComment later

  @@map("notifications")
}

// Minimal Session model for relation (If using database sessions with next-auth)
model Session {
  sessionId String   @id @map("session_id")
  userId    Int
  ipAddress String?
  userAgent String? @map("user_agent") // Explicit map for TEXT -> String
  createdAt DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

// Add other models like TopicCategory, UserFollows, Reactions, etc., later as needed